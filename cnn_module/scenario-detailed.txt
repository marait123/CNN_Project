layers = [0,1,2,3,4]
* IMMEDIATE_START_ADDRESS= 3575 + 16 * 120 * 5 * 5 = 51575
* layer_type_rom = [0,1,0,1,0] // 0 Convolution 1 Pooling
* input_start_address_rom = [0,IMMEDIATE_START_ADDRESS,IMMEDIATE_START_ADDRESS+784*1,IMMEDIATE_START_ADDRESS+784+196*6,IMMEDIATE_START_ADDRESS+1960+16*100,IMMEDIATE_START_ADDRESS+3560+25 ] 
* input_size_rom = [1024,784,14*14,100,5*5] 
* output_start_address_rom = [IMMEDIATE_START_ADDRESS,IMMEDIATE_START_ADDRESS+784*1,IMMEDIATE_START_ADDRESS+784+196*6,IMMEDIATE_START_ADDRESS+1960+16*100,IMMEDIATE_START_ADDRESS+3560+25 ] 
* output_size_rom = [784,14*14=196,100,5*5,1] 
* filter_start_address_rom = [1024,*,1174,*,3575] 
* max_feature_maps_rom = [6,*,16,*,120] eg. 16 
* max_depth_rom = [1,*,6,*,16] 	eg. 6

intialize {
current_layer_counter = 0
}

POOLING 
// inputs
* input_start_address
* input_size // this is the input of 2D Image or matrix
* output_start_address // this the first place to write to the output
* output_size // the output of 1 feature map pooled
* max_feature_maps // this the number of feature maps of the prevoius conv layer
					// and the number of output maps from the current
on (start, clk, current_layer_counter)
if layer_type[current_layer_counter] == 1;
	// intialize the POOLING

	input_start_address = input_start_address_rom[current_layer_counter]
	input_size = input_size_rom[current_layer_counter]
	output_start_address = output_start_address_rom[current_layer_counter]
	output_size = output_size_rom[current_layer_counter]
	max_feature_maps = max_feature_maps_rom[current_layer_counter]


	For feature = 0 : max_feature_maps;
		Load Input from MemAddr = input_start_address + input_size * feature 
		OUT_POOL=1
		store output at MemAddr = output_start_address + output_size*feature
		OUT_POOL = 0
	current_layer_counter+=1


Convolution 
// inputs
* input_start_address
* input_size // this is the input of 2D Image or matrix
* output_start_address // this the first place to write to the output
* output_size // the output of 1 feature map convolved
* filter_start_address // the address of the 1st filter
* max_feature_maps eg. 16 
* max_depth 	eg. 6

if layer_type[current_layer_counter] == 0;

	// initialze Convolution	
	input_start_address = input_start_address_rom[current_layer_counter]
	input_size = input_size_rom[current_layer_counter]
	output_start_address = output_start_address_rom[current_layer_counter]
	output_size = output_size_rom[current_layer_counter]
	max_feature_maps = max_feature_maps_rom[current_layer_counter]
	filter_start_address = filter_start_address_rom[current_layer_counter]
	max_feature_maps = max_feature_maps_rom[current_layer_counter]
	max_depth = max_depth_rom[current_layer_counter]


	For feature = 0 : max_feature_maps;
		reset_accumulator = 1
		for depth in max_depth;		// now accumulating the result
			Load Input from MemAddr = input_start_address + input_size * feature 
			Load Filter from MemAddr = filter_start_address + max_depth * feature + filter_size(eg. 25)
			reset_acummulator=0	// has no effect when accumulating
			enable_convolve=0
			enalble_convolve = 1
			enable_convolve=0 // now data in buffers
			
		store output at MemAddr = output_start_address + output_size*feature
	current_layer_counter+=1

	